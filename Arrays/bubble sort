/*
 *     Bubble Sort
 * 
 *     Idea - Large elements come to the end of array by Swapping With adjacent elements
 */

 
public class BubbleSort {

    public static void sortArray(int array[]) {
        for(int i=0; i<array.length-1; i++){
            for(int j=0; j<array.length-i-1; j++){
                if (array[j]>array[j+1]) {
                    int tmp=array[j];
                    array[j]=array[j+1];
                    array[j+1]=tmp;
                }
            }
        } 
    }

    public static void main(String args[]) {
        int array[]={8,7,6,5,4,3,2,1,0};
        sortArray(array);
        
        for(int i=0; i<array.length; i++){
            System.out.print(array[i] + " ");
        }
    }
    
}

/*
 *    Output:
 *    0 1 2 3 4 5 6 7 8
 */
 */Bubble Sort Algorithm:

The program uses a sortArray method to perform the Bubble Sort algorithm on an array of integers.
Sorting Logic:

The outer loop, controlled by the variable i, runs from 0 to one less than the length of the array. It represents the number of passes through the array.
The inner loop, controlled by the variable j, runs from 0 to the remaining unsorted portion of the array (length of the array minus i minus 1).
Inside the inner loop, adjacent elements array[j] and array[j+1] are compared. If array[j] is greater than array[j+1], they are swapped. This step pushes the larger element towards the end of the array.
Main Method:

In the main method, an array of integers array is initialized with values in reverse order (from 8 to 0).
Sorting the Array:

The sortArray method is called to sort the array.
Printing the Sorted Array:

After sorting, the main method prints the sorted elements of the array using a loop.
Output:
The program correctly demonstrates the Bubble Sort algorithm and sorts the array in ascending order. The sorted array is printed as follows:

Copy code
0 1 2 3 4 5 6 7 8
The Bubble Sort algorithm repeatedly compares and swaps adjacent elements until the entire array is sorted. In this case, the algorithm successfully sorts the array in ascending order, as shown in the output.




